"""
Student information for this assignment:

Replace Pranav Pillai with your name.
On my/our honor, Pranav Pillai and <FULL NAME>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: pp25346
UT EID 2:
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        if coeff == 0:
            return 0
        new_node = Node(coeff,exp)
        if self.head is None or exp > self.head.exp:
            new_node.next = self.head
            self.head = new_node
            return
        curr = self.head
        prev = None
        while curr and curr.exp >= exp:
            if curr.exp == exp:
                curr.coeff += coeff
                if curr.coeff == 0:
                    if prev is None:
                        self.head = curr.next
                    else:
                        prev.next = curr.next
                return
            prev = curr
            curr = curr.next
        new_node.next = curr
        prev.next = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        result = LinkedList()
        poly1 = self.head
        poly2 = p.head
        while poly1:
            result.insert_term(poly1.coeff, poly1.exp)
            poly1 = poly1.next
        while poly2:
            result.insert_term(poly2.coeff, poly2.exp)
            poly2 = poly2.next
        while poly1 and poly2:
            if poly1.exp == poly2.exp:
                add_coeff = poly1.coeff + poly2.coeff
                if add_coeff != 0:
                    result.insert_term(add_coeff, poly1.exp)
                poly1 = poly1.next
                poly2 = poly2.next
            elif poly1.exp < poly2.exp:
                result.insert_term(poly2.coeff, poly2.exp)
                poly2 = poly2.next
            else:
                result.insert_term(poly1.coeff, poly1.exp)
                poly1 = poly1.next
                
            
        return result

        pass

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        result = LinkedList()
        poly1 = self.head
        while poly1:
            poly2 = p.head
            while poly2:
                mult_exp = poly1.exp + poly2.exp
                mult_coeff = poly2.coeff * poly1.coeff
                result.insert_term(mult_coeff, mult_exp)
                poly2 = poly2.next
            poly1 = poly1.next
        return result

    # Return a string representation of the polynomial.
    def __iter__(self):
        nodes = []
        curr = self.head
        while curr:
            nodes.append(curr)
            curr = curr.next
        return iter(nodes)

    def __str__(self):
        return " + ".join(f"({node.coeff}, {node.exp})" for node in self) or ""

def read_non_empty():
    line = input().strip()
    while line == "":
        line = input().strip()
    return line

def main():
    n = int(read_non_empty())
    p = LinkedList()
    for _ in range(n):
        coeff, exp = map(int, read_non_empty().split())
        p.insert_term(coeff, exp)
    m = int(read_non_empty())
    q = LinkedList()
    for _ in range(m):
        coeff, exp = map(int, read_non_empty().split())
        q.insert_term(coeff, exp)
    sum_poly = p.add(q)
    mult_poly = p.mult(q)
    print(sum_poly)
    print(mult_poly)




    # read data from stdin (terminal/file) using input() and create polynomial p

    # read data from stdin (terminal/file) using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product



if __name__ == "__main__":
    main()
